#!/bin/bash

function main
{
	if [[ $# -lt 1 ]]; then 
		echo "objc-run usage: objc-run file.m [params]" 1>&2
		exit 1
	fi

	# check if the source file contains an embedded podfile for CocoaPods

	podstart=`awk '/podfile-start/{print NR+1}' "$1"`
	podend=`awk '/podfile-end/{print NR-1}' "$1"`

	if [ ${#podstart} -gt 0 ]
	then
		handleSourceFileWithCocoaPods "$@"
	else
		handleSourceFileWithoutCocoaPods "$@"
	fi
}

function handleSourceFileWithoutCocoaPods
{
	filepath="$1"
	filename="$(basename "$filepath")"
	appname="${filename%.*}"
	target="$(dirname "$filepath")/$appname"
	shift

	# check if there's already a file with the same name as our compiled app, if so exit
	if [[ -f "$target" ]]; then
		echo "objc-run: file already exists at $dirname/$appname ... exiting" 1>&2
		exit 1
	fi

	# compile the file
	# remove shebangs on first line, first chars only
	clang -o "$target" -Wall -std=c99 -framework Foundation -lobjc -fobjc-arc -fmodules -x objective-c <(awk 'NR>1 || !/^#!/' "$filepath")
	clangExitCode=$?

	# on clang success, run compiled application and remove it
	if [[ $clangExitCode -eq 0 ]]; then 
		"$target" "$@"
		rm -f "$target"
	else
		echo "objc-run: clang returned with error" 1>&2
		exit 1
	fi

	# exit explicitly with no error
	exit 0
}

function handleSourceFileWithCocoaPods
{
	filepath="$1"
	filename="$(basename "$filepath")"
	appname="${filename%.*}"
	target="$(dirname "$filepath")/$appname"
	shift
	
	# check if there's already a file with the same name as our compiled app, if so exit
	if [[ -f "$target" ]]; then
		echo "objc-run: file already exists at $dirname/$appname ... exiting" 1>&2
		exit 1
	fi
	
	# check if a  temporary project directory already exists, if not create it
	sourcePathHash=`md5 -qs "$filepath"`
	projectDirPath="${TMPDIR}objc-run/$sourcePathHash"
	if [ ! -d $projectDirPath ]
	then
		createProjectDirectory "$projectDirPath"
	fi

	# copy source file into temp dir, removing shebang
	awk 'NR>1 || !/^#!/' "$filepath" > "$projectDirPath/main.m"
	
	# extract embedded podfile and save it into projectdir
	podstart=`awk '/podfile-start/{print NR+1}' $filepath`
	podend=`awk '/podfile-end/{print NR-1}' $filepath`
	sed -n ${podstart},${podend}p $filepath > "$projectDirPath/podfile.new"
	
	(
		cd "$projectDirPath"

		if [ ! -f podfile ]
		then
			mv podfile.new podfile
			echo "Installing pod"
			pod install
		else
			if ! diff podfile.new podfile >/dev/null 2>&1
			then
				echo "Updating pod"
				mv -f podfile.new podfile
				pod update
			else
				rm podfile.new
			fi
		fi
		
	)
	xcodebuild -workspace "$projectDirPath/clitest.xcworkspace/" -scheme clitest -configuration Release DEPLOYMENT_LOCATION=YES DSTROOT=build DWARF_DSYM_FOLDER_PATH=build 
	xcodebuildExitCode=$?

	# on clang success, run compiled application and remove it
	if [[ $xcodebuildExitCode -eq 0 ]]; then 
		cp "$projectDirPath/build/usr/local/bin/clitest" $target
		trap '{ rm -f "$target" ; exit 1; }' INT
		"$target" "$@"
		trap '' INT
		rm -f "$target"
	else
		echo "objc-run: xcodebuild returned with error" 1>&2
		exit 1
	fi
	
	open "$projectDirPath"

	exit 0
}

function writePCHfile
{
cat <<EOF > "$1"
#ifdef __OBJC__
	#import <Foundation/Foundation.h>
#endif

EOF
}

function writePBXFile
{
# To "compress" a PBX file for use here use the following command:
# % gzip --stdout ${PBXFile} | base64 --break=64
cat <<EOF | base64 --decode | gunzip --stdout > "$1"
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
EOF
}

function createXcodeProjectPackage
{
	mkdir -p "$1"
	writePBXFile "$1/project.pbxproj"
}

function createProjectDirectory
{
	mkdir -p "$1"
	createXcodeProjectPackage "$1/clitest.xcodeproj"
	writePCHfile "$1/clitest-Prefix.pch"
}

main "$@"
